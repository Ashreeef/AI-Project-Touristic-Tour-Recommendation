from flask import Flask, request, jsonify
from flask_cors import CORS
import json

from itinerary_planner import (
    TourPlanningProblem,
    a_star_search,
    create_initial_state,
)

app = Flask(__name__)

CORS(app, resources={
    r"/api/*": {
        "origins": ["http://localhost:5173", "http://127.0.0.1:5173"],
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type"]
    }
})
# Load your full list of attractions once at startup
with open("../Data/attractions.json", "r", encoding="utf-8") as f:
    ALL_ATTRACTIONS = json.load(f)


@app.route("/api/itinerary/generate", methods=["POST"])
def compute_itinerary():
    """
    Expects JSON payload with:
      - wilaya: str
      - location: "lat, lon" string
      - activities: [ str, ... ]
      - budget: number
      - minHotelStars: int    (ignored by A*)
      - maxHotelStars: int    (ignored by A*)
      - maxAttractions: int
      - maxTravelHours: int
      - hasCar: bool
    Returns a 7-day itinerary generated by A*.
    """
  
    try:
        data = request.get_json()
        print("Received data:", data)
        if not data:
            raise ValueError("No JSON data received")
        # Validate required fields
        required_fields = ['wilaya', 'location', 'activities', 'budget']
        for field in required_fields:
            if field not in data:
                return jsonify({"error": f"Missing required field: {field}"}), 400

        # Process the data
        wilaya = data.get("wilaya", "").strip()
        loc_str = data.get("location", "")
        
        try:
            lat_str, lon_str = [s.strip() for s in loc_str.split(",")]
            start_location = (float(lat_str), float(lon_str))
        except Exception as e:
            return jsonify({"error": "Invalid GPS coordinates format"}), 400

        user_prefs = {
            "categories": data.get("activities", [])
        }

        constraints = {
            "max_total_budget": float(data.get("budget", 0)),
            "max_daily_time": float(data.get("maxTravelHours", 4)),
            "max_attractions_per_day": int(data.get("maxAttractions", 2)),
            "has_car": bool(data.get("hasCar", False)),
            "min_hotel_stars": int(data.get("minHotelStars", 3)),
            "max_hotel_stars": int(data.get("maxHotelStars", 5))
        }

        # Filter attractions by wilaya
        attractions = [
            a for a in ALL_ATTRACTIONS
            if wilaya.lower() in (a.get("wilaya", "").lower(), a.get("city", "").lower())
        ]
        
        if not attractions:
            attractions = ALL_ATTRACTIONS  # fallback to all if none matched

        # Build initial state & problem instance
        initial_state = create_initial_state(start_location, user_prefs)
        problem = TourPlanningProblem(initial_state, attractions, user_prefs, constraints)

        # Run A* search
        goal_node = a_star_search(problem)
        if goal_node is None:
            return jsonify({"error": "No feasible itinerary found with the given constraints"}), 400

        # Format the response
        result = {
            "title": f"Explore {wilaya}: {len(goal_node.state['itinerary'])}-Day Itinerary",
            "summary": f"A customized itinerary based on your preferences for {', '.join(user_prefs['categories'])} activities.",
            "totalBudget": goal_node.state['total_cost'],
            "days": []
        }

        for day_idx, day_plan in enumerate(goal_node.state['itinerary'], start=1):
            day_entries = []
            for name in day_plan:
                att = problem._att_by_name[name]
                day_entries.append({
                    "name": att["name"],
                    "gps": att["gps"],
                    "category": att.get("category"),
                    "cost": att.get("cost"),
                    "visit_duration": att.get("visit_duration"),
                })
            
            result["days"].append({
                "day": day_idx,
                "title": f"Day {day_idx}: Exploring {wilaya}",
                "location": wilaya,
                "coordinates": day_entries[-1]["gps"] if day_entries else start_location,
                "activities": [{
                    "time": f"{9 + i}:00",  # Simple time assignment
                    "title": entry["name"],
                    "description": f"Enjoy this {entry.get('category', 'attraction')} in {wilaya}."
                } for i, entry in enumerate(day_entries)],
                "accommodation": {
                    "name": "Recommended Hotel",
                    "type": "4-star hotel",
                    "amenities": ["WiFi", "Restaurant", "Pool"]
                }
            })

        return jsonify({"data": result})

    except Exception as e:
        print(f"Error generating itinerary: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

print("\n=== REGISTERED ROUTES ===")
for rule in app.url_map.iter_rules():
    print(f"{rule.rule} (Methods: {', '.join(rule.methods)})")
print("=======================\n")
if __name__ == "__main__":
    # listen on all interfaces, port 5000
    app.run(host="0.0.0.0", port=5000, debug=True)
