from flask import Flask, request, jsonify
from flask_cors import CORS
import json

from itinerary_planner import (
    TourPlanningProblem,
    a_star_search,
    create_initial_state,
)

app = Flask(__name__)
CORS(app)

# Load your full list of attractions once at startup
with open("../Data/attractions.json", "r", encoding="utf-8") as f:
    ALL_ATTRACTIONS = json.load(f)


@app.route("/api/itinerary", methods=["POST"])
def compute_itinerary():
    """
    Expects JSON payload with:
      - wilaya: str
      - location: "lat, lon" string
      - activities: [ str, ... ]
      - budget: number
      - minHotelStars: int    (ignored by A*)
      - maxHotelStars: int    (ignored by A*)
      - maxAttractions: int
      - maxTravelHours: int
      - hasCar: bool
    Returns a 7-day itinerary generated by A*.
    """
    data = request.get_json()
    print("Received data:", data)  # Add this line for debugging

    # 1) Parse & validate inputs
    wilaya = data.get("wilaya", "").strip()
    loc_str = data.get("location", "")
    try:
        lat_str, lon_str = [s.strip() for s in loc_str.split(",")]
        start_location = (float(lat_str), float(lon_str))
    except Exception:
        return jsonify({"error": "Invalid GPS coordinates"}), 400

    user_prefs = {
        "categories": data.get("activities", [])
    }

    constraints = {
        "max_total_budget": float(data.get("budget", 0)),
        "max_daily_time": float(data.get("maxTravelHours", 0)),
        "max_attractions_per_day": int(data.get("maxAttractions", 0)),
        "has_car": bool(data.get("hasCar", False)),
        # you can also add "max_daily_distance" if you wish
    }

    # 2) Filter attractions by wilaya if your data includes that field
    attractions = [
        a for a in ALL_ATTRACTIONS
        if wilaya.lower() in (a.get("wilaya", "").lower(), a.get("city", "").lower())
    ]
    if not attractions:
        # fallback to all if none matched
        attractions = ALL_ATTRACTIONS

    # 3) Build initial state & problem instance
    initial_state = create_initial_state(start_location, user_prefs)
    problem = TourPlanningProblem(initial_state, attractions, user_prefs, constraints)

    # 4) Run A* search
    goal_node = a_star_search(problem)
    if goal_node is None:
        return jsonify({"error": "No feasible itinerary found"}), 400

    # 5) Serialize the 7-day plan
    result = []
    for day_idx, day_plan in enumerate(goal_node.state["itinerary"], start=1):
        day_entries = []
        for name in day_plan:
            att = problem._att_by_name[name]
            day_entries.append({
                "name": att["name"],
                "gps":     att["gps"],
                "category":att.get("category"),
                "cost":    att.get("cost"),
                "visit_duration": att.get("visit_duration"),
            })
        result.append({
            "day": day_idx,
            "attractions": day_entries
        })

    return jsonify({"itinerary": result})


if __name__ == "__main__":
    # listen on all interfaces, port 5000
    app.run(host="0.0.0.0", port=5000, debug=True)
